local args = { ... }
length = 20 -- size of the farm
height = 6
ttl = 5 -- seconds
dir = args[1] -- strafe direction, 1 = right; 0 = left

-- print("This is a test.."..dir+1)
dir = dir * 1

function H()
turtle.turnLeft()
turtle.dig()
SCK()
turtle.turnLeft()
turtle.digUp()
turtle.up()
turtle.dig()
turtle.forward()
SCK()
turtle.turnLeft()
SCK()
turtle.turnLeft()
SCK()

k = 2
while k < height do

if turtle.detect() then
turtle.dig()
end

if k < height then
if (not turtle.up()) and turtle.getFuelLevel() > 0 then
turtle.digUp()
else
k = k + 1
end
end

--if turtle.detect() then
--turtle.dig()
--end

end

turtle.dig()
turtle.forward()

k = 2
while k < height do

if turtle.detect() then
turtle.dig()
end

if not turtle.down() then
turtle.digDown()
end

if turtle.detect() then
turtle.dig()
end

k = k + 1
end

turtle.down()
turtle.dig()
SCK()

if turtle.getItemCount(1) > 1 then
turtle.select(1)
turtle.place()
end

end

function SCK()
turtle.suck()
turtle.suckUp()
turtle.suckDown()
end

function S()
  re = "nix"
  SCK()

  turtle.select(1)
  if turtle.compare() then
    re = "sapling"
  end
  
  turtle.select(2)
  if turtle.compare() then
    re = "wood"
  end
  return re
end

function RF()
SCK()
turtle.select(16)
turtle.refuel()
turtle.select(1)
end

function R()
f = 0
SCK()
if dir == 0 then
turtle.turnRight()
elseif dir == 1 then
turtle.turnLeft()
end
print("fleeing forward...")
while f < length do
turtle.attack()
SCK()
turtle.forward()
f = f + 1
end

if dir == 1 then
turtle.turnRight()
elseif dir == 0 then
turtle.turnLeft()
end
SCK()
end

function TD() -- turn dir
  if dir == 1 then
    turtle.turnRight()
  else
    turtle.turnLeft()  
  end
end

function TDR() -- turn dir reverse

if dir == 0 then
turtle.turnRight()
else
turtle.turnLeft()
end

end

function getlava()

turtle.back()
turtle.back()
turtle.back()
TDR()

turtle.forward()
redstone.setOutput("front",true)
sleep(0.5)
redstone.setOutput("front",false)
sleep(8)
turtle.select(16)
if turtle.placeDown() then
print("got lava!")
else
print("error getting lava")

turtle.select(4)
if turtle.detectDown() then
  turtle.forward()
  turtle.forward()
  
  TD()
  
  z = 0
  while z < 9 do
    turtle.forward()
    z = z + 1
  end
  TD()
  print("get lava!")
  sleep(15)
  
  TD()
  z = 0
  while z < 9 do
  turtle.forward()
  z = z + 1
  end
  TD()
  turtle.back()
  turtle.back()
    
end

end

turtle.select(1)
turtle.back()
TD()
turtle.forward()
turtle.forward()
turtle.forward()

end

function sortsaps()
  TDR()
  turtle.forward()
  turtle.forward()
  
  i = 4
  while i < 16 do
    turtle.select(i)
    if turtle.compareTo(1) then
      turtle.dropDown()
    end
    i = i + 1
  end
  turtle.select(1)
  while turtle.suckDown() do
    print("restoring saplings...")
  end
  turtle.back()
  turtle.back()
  TD()
end

function M()
SCK()
if dir == 0 then
  turtle.turnLeft()
  SCK()
  if not turtle.forward() then
    turtle.turnRight()
    SCK()
    return false
  end
  turtle.turnRight()
  SCK()
  
  elseif dir == 1 then
    turtle.turnRight()
    SCK()
    if not turtle.forward() then
      turtle.turnLeft()
      SCK()
      return false
    end
    turtle.turnLeft()
    SCK()
  end
  return true
end

function cleanall()
  i = 4
  while i < 16 do
    turtle.select(i)
    turtle.dropDown()
    i = i + 1
  end
  turtle.select(1)
end

sortsaps()
cleanall()
getlava()


while false do
RF()

q = 0
s = ""

while turtle.getFuelLevel() > 20 do
print(S())

q = 0
while q < (length+1) do
SCK()

if not M() then
print("return to start because move failed :/")
  R() -- return to start
  q = 0
end

turtle.select(3)
if turtle.compareDown() then
  sortsaps()
  cleanall()
  getlava()
end
turtle.select(1)

s = S() -- S()can what is infront and write to 's'
print(s)

if s == "nix" and turtle.getItemCount(1) > 1 then
  turtle.select(1)
  turtle.place()
end

if s == "wood" then
H()
SCK()
end

s = ""
q = q + 1

end
sleep(30)
end


print("Kein Sprit!")

end
